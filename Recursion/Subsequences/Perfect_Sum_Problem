Perfect Sum Problem
Given an array arr of size n of non-negative integers and an integer sum, the task is to count all subsets of the given array with a sum equal to a given sum.

Note: Answer can be very large, so, output answer modulo 109+7.

Input: 
n = 6, arr = [5, 2, 3, 10, 6, 8], sum = 10
Output: 
3
Explanation: 
{5, 2, 3}, {2, 8}, {10} are possible subsets.
Input: 
n = 5, arr = [2, 5, 1, 4, 3], sum = 10
Output: 
3
Explanation: 
{2, 1, 4, 3}, {5, 1, 4}, {2, 5, 3} are possible subsets.

================================================================================  Using Backtracking =============================================================================================================

  Time Complexity : 2powerN (Exponential time)
--------------------------------------------------------------
//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution{

	public:
	
	int func(int s,int index,int arr[],int n, int sum){
	    
	      if(index==n){
	          if(s==sum) return 1;
	          return 0;
	      }
	      
	      // adding the element of index
	      s+=arr[index];
	      int l=func(s,index+1,arr,n,sum);
	      
	      // removing the element of index
	      s-=arr[index];
	      int r=func(s,index+1,arr,n,sum);
	      
	      return l+r;
	}
	int perfectSum(int arr[], int n, int sum)
	{
        // Your code goes here
        return func(0,0,arr,n,sum);
	}
	  
};
