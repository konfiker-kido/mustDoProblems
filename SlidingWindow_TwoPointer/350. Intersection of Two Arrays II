Given two integer arrays nums1 and nums2, return an array of their intersection. 
Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.


==============================   Using Hasmap =========================================================================

class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
       
       vector<int> ans;
        unordered_map<int,int> mp1;
        for(auto v:nums1)
           mp1[v]++;
           // iterating over the second array
           for(int i=0;i<nums2.size();i++){
              int val=nums2[i];
              if(mp1[val]){
                  mp1[val]--;
                  ans.push_back(val);
              }
           }
           return ans;      
    }
};

=============================================  Using Two Pointer Approach =====================================================================================

=> sort both the array,
=> iterate over the loop, while they exceed the index from any of them
=> check if nums1[1] == nums2[j] push to ans array and i++, j++
=> else if nums1[i] > nums2[j] increase one index of nums2, j++
=> else increse i++
=> return ans array


-------------------------------
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        
        vector<int> ans;

    sort(nums1.begin(),nums1.end());
    sort(nums2.begin(),nums2.end());

        int n=nums1.size();
        int m=nums2.size();
       
        int i=0,j=0;
        // if both of them will exceed their index then it will break the loop
        while(i<n and j<m){
            
            if(nums1[i]==nums2[j]){
                ans.push_back(nums1[i]);
                i++,j++;
            }else if(nums1[i]>nums2[j]){ // bcz array is sorted 
              j++;
            }else{
                i++;
            }
        }
           return ans;
          
    }
};
