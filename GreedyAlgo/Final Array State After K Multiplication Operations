3264 Final Array State After K Multiplication Operations 

Input: nums = [2,1,3,5,6], k = 5, multiplier = 2

Output: [8,4,6,5,6]
Explanation:
Operation	Result
  After operation 1	[2, 2, 3, 5, 6]
  After operation 2	[4, 2, 3, 5, 6]
  After operation 3	[4, 4, 3, 5, 6]
  After operation 4	[4, 4, 6, 5, 6]
  After operation 5	[8, 4, 6, 5, 6]



__________________________________________________________________________________  Brute Force ________________________________________________________
class Solution {
public:  

    vector<int> getFinalState(vector<int>& nums, int k, int multiplier) {
         
         // creating a minHeap with pair which will store {nums_element,index}
          priority_queue<
                pair<int,int>,
                vector<pair<int,int>>,
                greater<pair<int,int>>
            > minHeap;

          int n=nums.size();
          vector<int> ans(n); // to return the final answer

          for(int i=0;i<n;i++) {
              minHeap.push({nums[i],i}); // heapify
          }
      
       // repeat the process k times
           for(int i=0;i<k;i++){
               int val=minHeap.top().first; // taking the smallest element
               int index=minHeap.top().second; // index of the samllest element
               minHeap.pop();  // removing that element bcz we have to update 
               minHeap.push({val*multiplier,index}); // pushing the updated element to minHeap
           }

          
// placing all the element to the ans array, according to their index
          while(!minHeap.empty()){
                ans[minHeap.top().second]=minHeap.top().first;
                minHeap.pop();
          }  
          return ans;  
    }
};

----------------------------------------------------------------  Optimal Solution --------------------------------------------------------------------------

class Solution {
public:
    vector<int> getFinalState(vector<int>& nums, int k, int mul) {
        while (k--) {
            auto minIt = min_element(nums.begin(), nums.end());
            *minIt *= mul;
        }
        return nums;
    }
};




