Leetcode

66.  Plus One


Example 1:

Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
Example 2:

Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].
Example 3:

Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].


======================================================Naive Solution  ============================================================================
class Solution {
public:
  vector<int> addCarry(vector<int> ans,int carry){
      vector<int> v(ans.size()+1);
      v[0]=carry;
      for(int i=0;i<ans.size();i++){
        v[i+1]=ans[i];
      }
      return v;
  }
    vector<int> plusOne(vector<int>& digits) {

          int carry=0;
          int n=digits.size();
       // adding to the last digit
          int digit=digits[n-1];
              digit=digit+1+carry;
              carry=digit/10;
              digits[n-1]=digit%10;
      // now traversing to the array of digits
          for(int i=n-2;i>=0;i--){
              int digit=digits[i];
              digit=digit+carry;
              carry=digit/10;
              digits[i]=digit%10;
          }
          // if carry has some value then add it to the first index of array
          if(carry) return addCarry(digits,carry);

          return digits;
    }
};

======================================================================== Optimal =========================================================
class Solution {
public:

vector<int> plusOne(vector<int>& digits) {

    int n=digits.size();      
       for(int i=n-1;i>=0;i--){  
             if(i==n-1) digits[i]++; // if the last digit then add 1 
             if(digits[i]==10){
                digits[i]=0;
                if(i!=0) digits[i-1]++;
                else{
                    // push zero at the end 
                    digits.push_back(0);
                    // then put one at current index
                    digits[i]=1;
                }
             }
       }

          return digits;
    }
};
