2183. Count Array Pairs Divisible by K

Hard

Given a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) such that:

0 <= i < j <= n - 1 and
nums[i] * nums[j] is divisible by k



Example 1:

Input: nums = [1,2,3,4,5], k = 2
Output: 7
Explanation: 
The 7 pairs of indices whose corresponding products are divisible by 2 are
(0, 1), (0, 3), (1, 2), (1, 3), (1, 4), (2, 3), and (3, 4).
Their products are 2, 4, 6, 8, 10, 12, and 20 respectively.
Other pairs such as (0, 2) and (2, 4) have products 3 and 15 respectively, which are not divisible by 2.    
Example 2:

Input: nums = [1,2,3,4], k = 5
Output: 0
Explanation: There does not exist any pair of indices whose corresponding product is divisible by 5.


====================================  Brute Force ========================================================================================
class Solution {
public:

   int gcd(int a, int b){

   while(b){
     int rem=a%b;
     a=b;
     b=rem; 
    } 
  return a;
}
    long long countPairs(vector<int>& nums, int k) {
        
        long long ans=0;
       
       for(int i=0;i<nums.size()-1;i++){

          for(int j=i+1;j<nums.size();j++){
              if((nums[i]*nums[j])%k==0) ans++;
         }
       }
        return ans;
}
};



========================================  Optimized Approach ==============================================================================================
class Solution {
public:

   int gcd(int a, int b){

   while(b){
     int rem=a%b;
     a=b;
     b=rem; 
    } 
  return a;
}

long long countPairs(vector<int>& nums, int k) {
        
        long long ans=0;
       map<int,int> mp;

       for(int i=0;i<nums.size();i++){
          int gcd1=gcd(nums[i],k);  // gcd of nums[i] and k  
          int want=k/gcd1;    //  remaning gcd to be the multiple of k
          
          // iterate the whole map bcz there can be multiple values( in the form of mulitiples)
          auto itr=mp.begin();    
          while(itr!=mp.end()){
             if(itr->first % want==0) ans+=itr->second; // adding number of counts to ans
             itr++;
          }
           mp[gcd1]++; // storing the gcd of nums[i] and k   
       }
        return ans;
    }

};
