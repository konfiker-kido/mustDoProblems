Given an infix expression in the form of string str. Convert this infix expression to postfix expression.

Infix expression: The expression of the form a op b. When an operator is in-between every pair of operands.
Postfix expression: The expression of the form a b op. When an operator is followed for every pair of operands.
Note: The order of precedence is: ^ greater than * equals to / greater than + equals to -. Ignore the right associativity of ^.

Input: str = "a+b*(c^d-e)^(f+g*h)-i"
Output: abcd^e-fgh*+^*+i-
Explanation:
After converting the infix expression 
into postfix expression, the resultant 
expression will be abcd^e-fgh*+^*+i-
Example 2:

Input: str = "A*(B+C)/D"
Output: ABC+*D/
Explanation:
After converting the infix expression 
into postfix expression, the resultant 
expression will be ABC+*D/

=================================================  C++ Code =====================================================================================================================


//{ Driver Code Starts
// C++ implementation to convert infix expression to postfix
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    // Function to convert an infix expression to a postfix expression.
    
    int priority(char ch) {
        if (ch == '^') return 3;
        if (ch == '*' || ch == '/') return 2;
        if (ch == '+' || ch == '-') return 1;
        return -1;
    }
    
    
    string infixToPostfix(string s) {
        // Your code here
        
        int n=s.length();
        
        stack<char> st;
        string ans;
        
        for(int i=0;i<n;i++){
           
           char ch=s[i];
           
           // push to ans string if it is an Operand
           if( (s[i]>='A' and s[i]<='Z') || (s[i]>='a'  and s[i]<='z') || (ch>='0' and ch<='9'))
             ans+=ch;
             else if( ch=='(' ) st.push(ch); // push it to stack for oppening bracket
             else if( ch==')'){ 
                 
                 // go to till we did not get the closing bracket
                  while(! st.empty() and  st.top()!='(' ){
                      ans+=st.top();
                      st.pop();
                  }
                  // in any case we have to ignore the pushed (  in the stack, removee it
                   if (!st.empty() && st.top() == '(') {
                    st.pop();
                }
             }
             else{
                 // if it is a operator check the priori of it and push accordingly
               while (!st.empty() && priority(st.top()) >= priority(ch)){
                      ans+=st.top();
                      st.pop();
                 } 
                 // Note : operator of greater priority will be in the ans string ohterwise push it to stack 
                      st.push(ch);
             }            
        }
                
     // add all the remaining chars to ans string   
        while(! st.empty()){
            ans+=st.top();
            st.pop();
        }
        
        return ans;
    }
};
