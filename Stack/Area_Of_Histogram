Find the largest rectangular area possible in a given histogram where the largest rectangle can be made of a number of contiguous bars. 
For simplicity, 
assume that all bars have the same width and the width is 1 unit, there will be N bars height of each bar will be given by the array arr.


N = 7
arr[] = {6,2,5,4,5,1,6}
Output: 12
Explanation: In this example the largest area would be 12 of height 4 and width 3. We can achieve this 
area by choosing 3rd, 4th and 5th bars.


Input:
N = 8
arr[] = {7 2 8 9 1 3 6 5}
Output: 16
Explanation: Maximum size of the histogram 
will be 8  and there will be 2 consecutive 
histogram. And hence the area of the 
histogram will be 8x2 = 16.

==============================================  Brute Force Solution ================================================================
//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution
{
      typedef long long ll;
     
    public:
    
vector<ll> nseFun(ll arr[], int n) {
    vector<ll> nse(n); // This will store the right-most positions
    stack<ll> st;
            
    for (int i = n-1; i >=0; i--) {
        int index=i;
        // Pop elements from the stack while stack is not empty and top of the stack is less than or equal to current element
        while (!st.empty() && arr[i] <= arr[st.top()]) {
            st.pop();
        }
        
        // If stack is empty, there is no greater element to the right, so assign n
        // Otherwise, assign the index of the nearest greater element
       nse[i]=st.empty()?n-1:st.top()-1; 
        
        // Push current index onto the stack
        st.push(i);
    }
       return nse;     
    
}

vector<ll> pseFun(ll arr[], int n) {
    vector<ll> nse(n); // This will store the right-most positions
    stack<ll> st;
            
    for (int i = 0; i<n; i++) {
        int index=-1;
        // Pop elements from the stack while stack is not empty and top of the stack is less than or equal to current element
         
        while (!st.empty() && arr[i] <= arr[st.top()]) {
            st.pop();
        }
        
        // If stack is empty, there is no greater element to the right, so assign n
        // Otherwise, assign the index of the nearest greater element
          nse[i]=st.empty()?0:st.top()+1;  
        
        // Push current index onto the stack
         st.push(i);
    }
    return nse;   
}

//Function to find largest rectangular area possible in a given histogram.
    long long getMaxArea(long long arr[], int n)
    {
        // Your code here    
         vector<ll> nse=nseFun(arr,n);
         vector<ll> pse=pseFun(arr,n);
         ll ans=0;
         for(int i=0;i<n;i++){
             ll area=arr[i]*(nse[i]-pse[i]+1);
             ans=max(ans,area); 
         }
         return ans;
    }
};

========================================================  Better Solution ==================================================
   //Function to find largest rectangular area possible in a given histogram.
    long long getMaxArea(long long arr[], int n)
    {
        // Your code here
        
        //  vector<ll> nse=nseFun(arr,n);
        //  vector<ll> pse=pseFun(arr,n);
        stack<ll> st;
         ll ans=0;
         for(int i=0;i<n;i++){
            while(!st.empty() and arr[st.top()]>=arr[i]){
                ll ele=st.top();
                st.pop();
                int nse=i; // bcz arr[i] is smaller so for ele arr[i] is the nse (next smaller element), 
                ll pse=st.empty()?-1:st.top();
                ans=max(ans,arr[ele]*(nse-pse-1));
            } 
            st.push(i);
         }
         
         
         while(!st.empty()){
              
              int nse=n;
              ll ele=st.top(); st.pop();
              ll pse=st.empty()?-1:st.top();
              ans=max(ans,arr[ele]*(nse-pse-1));
         }
         return ans;
    }
};
