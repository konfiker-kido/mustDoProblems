Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.

===================================================== C++ Code ==================================================================

-> using the concept of Monotonic Stack, But here we will directly using  String, but all the operation will be like stack

class Solution {
public:
   
    string removeKdigits(string num, int k) {
        
        if(num.size()==1 and k>=1) return "0";
        
        string ans;
        int n=num.length();
        
        for(int i=0;i<n;i++){
           
            while(ans!="" and ans.back()>num[i] and k>0 ){
                ans.pop_back();
                k--;
            }
            ans.push_back(num[i]);
        }
   // if k is remaining 
       while(k>0){
          ans.pop_back();
          k--;
       }
       
       // removing the leading zeros
            int i=0;
            while(ans[i]=='0' and i<ans.size()) i++;
            if(i==ans.size()) return "0";
        
        return ans.substr(i);
    }
};
