Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, 
which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.

 

Example 1:

Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.
Example 2:

Input: nums = [1,2,3,4,3]
Output: [2,3,4,-1,4]

------------------------------------------------------ C++ ( Brute Force )  --------------------------------------------------------------------------------------------------------------

class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        
          int n=nums.size();
          vector<int> ng(n,-1);

          for(int i=0;i<=n-1;i++){

            for(int j=i+1;j<=i+n-1;j++){
                 int index=j%n;
                 if(nums[index]>nums[i])
                  {
                    ng[i]=nums[index];
                    break;
                  }
                  
            }
           
          }

          return ng;
    }
};

============
Space: O(N)
time: O(N*N)
=================


------------------------------------------------  C++ (Better Approach) Monotonic Stack -----------------------------------------------------------------
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        
          int n=nums.size();
          vector<int> ng(n,-1);
          stack<int> st;
         
          // taking the hypothetical element to cover in circular Order 
         for(int i=2*n-1;i>=0;i--){
            
            // removing the elements from the stack till not getting the greater Element
            while(!st.empty() and st.top()<=nums[i%n]){
               st.pop();
            }

            // we will push to ng if it's index is less than n
              if(i<n){
                  ng[i]=st.empty()?-1:st.top();
              }

              // now push the ith element to the stack
              st.push(nums[i%n]); 
         }
           

          return ng;
    }
};

Space: O(2N)
time: O(4N) -> 2n FOR outer loop and same for the while loop
