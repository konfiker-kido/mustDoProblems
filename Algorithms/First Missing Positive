41. First Missing Positive
Hard

Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums.
You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.

---------------------------------- -------------------------------------( Optimised Intution ) -----------------------------------------------------------------------------------------------------------------------------------------------------------------
we have to put all the element to their respective seats


 1      2       3      4       5           <= Element 
____  ______  _____  ______  ______        <= Their Seats 
 0      1        2      3       4          <= index


-----------------------------------------------------------------------(  Code for this Solution  ) ---------------------------------------------------------------------------------------------------------------

class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
  
        int n=nums.size();

// Alloting the Seats to the Element ( Elements should be on the index (Element - 1))
        for(int i=0;i<nums.size();i++){
              int element=nums[i];
              if(element>=1 and element<=n){ // check for allot the Seat (Element shold be 1 and less than the size of given array) bcz we have to start from 1
                  int chair=element-1;  // bcz in index it will be element-1
                  if(nums[chair]!=element){
                      swap(nums[i],nums[chair]);
                      i--; // to check the swaped element again
                  }
              }
        }

// checking the Element with their respective seats
        for(int i=0;i<n;i++){
            if(nums[i]!=i+1){
                 return i+1;
            }
        }

        return n+1; // if all the Element are on their postion then next element will be the answer
    }
};
