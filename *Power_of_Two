231. Power of Two

Input: n = 1
Output: true
Explanation: 20 = 1

Input: n = 16
Output: true
Explanation: 24 = 16

Input: n = 3
Output: false


--------->  Using Recursion method -------

class Solution {
public:
  bool func(int n){
      if(n==1) // n is totally divided with 2
       return true;
       if(n%2!=0 or n==0) // n is not the divisible with 2 or less than 2
         return false;
         return func(n/2);
  }
    bool isPowerOfTwo(int n) {

       return func(n);
    }
};

* Time Complexity  *********
The time complexity of the provided solution to check if a given integer is a power of three using recursion is O(log3(n)).

Here's the breakdown:

In each recursive call, the input n is divided by 3 (n / 3).
The recursion continues until n becomes 1 or is no longer divisible by 3.
If we denote k as the number of recursive calls needed to reduce n to 1, then the time complexity can be expressed as O(log3(n)) because each recursive call reduces n by a factor of 3.


---> Using Bit Manipulation  --------
Let's take some good examples:
number->binary form
3->0000 0011
4->0000 0100
5->0000 0101
6->0000 0110
7->0000 0111
8->0000 1000

* The observation we can conclude is that the number which is a power of two has always compulsoryily 1 true bit.

Now consider:-
bit representation of 7  -> 0111
bit representation of 8  -> 1000
bitwise AND of 7 and 8 -> 0000
we are gonna use this property for all numbers which are powers of two

class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n<=0) return false;
        return ((n&(n-1))==0);
    }
};

Time Complexity : O(1)
Space Complexity : O(1)
